install.packages("mime")
Sys.getenv("R_LIBS_USER")
install.packages("mime")
install.packages("mime")
install.packages("knitr")
install.packages("forecast")
install.packages("data.table")
install.package("slidify")
install.packages("slidify")
install.packages("devtools")
source("http://bioconductor.org/biocLite.R")
biocLite()
install.packages("ggplot2")
install.packages(KernSmooth)
install.packages("KernSmooth")
library(KErnSmooth)
library(KernSmooth)
library("KernSmooth")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("devtools")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages("shiny")
install.packages("tm")
install.packages("SnowballC")
install.packages("flexclust")
install.packages("tm")
install.packages("tm")
install.packages("SnowballC")
install.packages("flexclust")
install.packages("ggplot2")
install.packages("maps")
install.packages("ggmap")
install.packages("igraph")
install.packages("wordcloud")
install.packages("RColorBrewer")
x <- 1
print(x)
x
cube <- function(x,n){
x^3
}
cube(3)
library(datasets)
data(iris)
?iris
type(iris)
dimnames(iris)
library(datasets)
data(iris)
data <- dimnames(iris)
library(datasets)
data(iris)
?iris
head(iris)
str(iris)
lapply(s,mean, s$Sepal.Length)
s <- split(iris, iris$Species)
lapply(s,mean, s$Sepal.Length)
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
lapply(s, function(x) mean(x[, c("Sepal.Length", "Sepal.Width")]))
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
head(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(mpg, gear, mean))
summary(mtcars)
s <- with(mtcars, tapply(mpg, cyl, mean))
s
s[1]
s[1][1]
s[1] - s[2]
s[1] - s[3]
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
s <- with(mtcars, tapply(hp, cyl, mean))
s[1] - s[3]
?inv
?solve
c(2,3,5,8,13)
Country <- c("Brazil", "China" , "India", "Switzwerland", "USA")
LifeExpectancy <- c(74,76,65,83,79)
Country
LifeExpactancy
LifeExpectancy
Country[1]
seq(0, 100, 2)
CountryData <- data.frame(Country, LifeExpactancy)
CountryData <- data.frame(Country, LifeExpectancy)
CountryData
CountryData$Population <- c(199000, 1390000, 1240000, 7997, 318000)
install.packages("ROCR")
setwd("~/Documents/analyticsedgier/Week 06. Clustering/Homeworks")
stocks <- read.csv("StocksCluster.csv")
View(stocks)
str(stocks)
table(stocks$PositiveDec)
6324 / nrow(stocks)
cor(stocks)
corr(stocks)
summary(stocks)
set.seed(144)
spl <- sample.split(stocks$PositiveDec, SplitRatio = 0.7)
library(caTools)
set.seed(144)
spl <- sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain <- subset(stocks, spl == TRUE)
stocksTest <- subset(stocks, spl == FALSE)
stocksLog <- glm(PositiveDec ~ ., data = stocksTrain, family='binomial')
pred <- predict(stocksLog, newdata = stockTest, type='response')
pred <- predict(stocksLog, newdata = stocksTest, type='response')
table(stocksTest$PositiveDec, pred > 0.5)
accuracy <- (417 + 1553) / nrow(stocksTest)
accuracy
table(stocksTest$PositiveDec, pred => 0.5)
table(stocksTest$PositiveDec, pred >= 0.5)
set.seed(144)
spl <- sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain <- subset(stocks, spl == TRUE)
stocksTest <- subset(stocks, spl == FALSE)
# create logistic model on training set and compute accuracy on test set
stocksLog <- glm(PositiveDec ~ ., data = stocksTrain, family='binomial')
pred <- predict(stocksLog, newdata = stocksTest, type='response')
table(stocksTest$PositiveDec, pred >= 0.5)
accuracy <- (417 + 1553) / nrow(stocksTest)
accuracy
pred <- predict(stocksLog, newdata = stocksTrain, type='response')
table(stocksTest$PositiveDec, pred >= 0.5)
accuracy <- (417 + 1553) / nrow(stocksTest)
accuracy
pred <- predict(stocksLog, newdata = stocksTrain, type='response')
table(stocksTrain$PositiveDec, pred >= 0.5)
accuracy <- (417 + 1553) / nrow(stocksTrain)
accuracy
accuracy <- (990 + 3640) / nrow(stocksTrain)
accuracy
pred2 <- predict(stocksLog, newdata = stocksTest, type='response')
table(stocksTest$PositiveDec, pred >= 0.5)
accuracy <- (417 + 1553) / nrow(stocksTest)
accuracy
table(stocksTest$PositiveDec)
1897 / nrow(stocksTest)
limitedTrain <- stocksTrain
limitedTrain$PositiveDec <- NULL
limitedTest <- stocksTest
limitedTest$PositiveDec <- NULL
library(caret)
preproc < preProcess(limitedTrain)
preproc <- preProcess(limitedTrain)
normTrain <- predict(preproc, limitedTrain)
normTest <- predict(preproc, limitedTest)
summary(normTrain)
summary(normTest)
k = 3
set.seed(144)
normTrainMartix <- as.matrix(normTrain)
set.seed(144)
km <- kmeans(normTrainMatrix, centers = k)
normTrainMatrix <- as.matrix(normTrain)
set.seed(144)
km <- kmeans(normTrainMatrix, centers = k)
table(km$cluster)
library(flexclust)
km.kcca <- as.kcca(km, normTrain)
clusterTrain = predict(km.kcca)
clusterTest <- predict(km.kcca, newdata=normTest)
table(clusterTest)
stocksTrain1 <- subset(stocksTrain, clusterTrain == 1)
stocksTrain2 <- subset(stocksTrain, clusterTrain == 2)
stocksTrain3 <- subset(stocksTrain, clusterTrain == 2)
summary(stocksTrain1$PositiveDec)
summary(stocksTrain2$PositiveDec)
summary(stocksTrain3$PositiveDec)
stocksTrain3 <- subset(stocksTrain, clusterTrain == 3)
summary(stocksTrain3$PositiveDec)
stocksTest3 <- subset(stocksTest, clusterTest == 3)
stocksTest1 <- subset(stocksTest, clusterTest == 1)
stocksTest2 <- subset(stocksTest, clusterTest == 2)
stocksTest3 <- subset(stocksTest, clusterTest == 3)
stocksModel1 <- glm(PositiveDec ~ ., data = stocksTrain1, family='binomial')
stocksModel2 <- glm(PositiveDec ~ ., data = stocksTrain2, family='binomial')
stocksModel3 <- glm(PositiveDec ~ ., data = stocksTrain3, family='binomial')
summary(stocksModel1)
summary(stocksModel2)
summary(stocksModel3)
predictTest1 <- predict(stocksModel1, newdata = stocksTest1, type = 'response')
table(stocksTest$PositiveDec, predictTest1 > 0.5)
table(stocksTest1$PositiveDec, predictTest1 > 0.5)
accuracy <- (30 + 774) / nrow(stocksTest1)
accuracy
predictTest2 <- predict(stocksModel2, newdata = stocksTest2, type = 'response')
table(stocksTest2$PositiveDec, predictTest2 > 0.5)
accuracy <- (333 + 757) / nrow(stocksTest2)
accuracy
predictTest3 <- predict(stocksModel3, newdata = stocksTest3, type = 'response')
table(stocksTest3$PositiveDec, predictTest3 > 0.5)
accuracy <- (49 + 13) / nrow(stocksTest3)
accuracy
accuracy <- (388 + 757) / nrow(stocksTest2)
accuracy
AllPredictions <- c(PredictTest1, PredictTest2, PredictTest3)
AllOutcomes <- c(stocksTest1$PositiveDec, stocksTest2$PositiveDec, stocksTest3$PositiveDec)
AllPredictions <- c(predictTest1, predictTest2, predictTest3)
table(AllOutcomes, AllPredictions > 0.5)
accuracy <- (467 + 1544) / (467 + 1110 + 353 + 1544)
accuracy
