install.packages("mime")
Sys.getenv("R_LIBS_USER")
install.packages("mime")
install.packages("mime")
install.packages("knitr")
install.packages("forecast")
install.packages("data.table")
install.package("slidify")
install.packages("slidify")
install.packages("devtools")
source("http://bioconductor.org/biocLite.R")
biocLite()
install.packages("ggplot2")
install.packages(KernSmooth)
install.packages("KernSmooth")
library(KErnSmooth)
library(KernSmooth)
library("KernSmooth")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("devtools")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages("shiny")
install.packages("tm")
install.packages("SnowballC")
install.packages("flexclust")
install.packages("tm")
install.packages("tm")
install.packages("SnowballC")
install.packages("flexclust")
install.packages("ggplot2")
install.packages("maps")
install.packages("ggmap")
install.packages("igraph")
install.packages("wordcloud")
install.packages("RColorBrewer")
x <- 1
print(x)
x
cube <- function(x,n){
x^3
}
cube(3)
library(datasets)
data(iris)
?iris
type(iris)
dimnames(iris)
library(datasets)
data(iris)
data <- dimnames(iris)
library(datasets)
data(iris)
?iris
head(iris)
str(iris)
lapply(s,mean, s$Sepal.Length)
s <- split(iris, iris$Species)
lapply(s,mean, s$Sepal.Length)
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
lapply(s, function(x) mean(x[, c("Sepal.Length", "Sepal.Width")]))
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
head(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(mpg, gear, mean))
summary(mtcars)
s <- with(mtcars, tapply(mpg, cyl, mean))
s
s[1]
s[1][1]
s[1] - s[2]
s[1] - s[3]
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
s <- with(mtcars, tapply(hp, cyl, mean))
s[1] - s[3]
?inv
?solve
c(2,3,5,8,13)
Country <- c("Brazil", "China" , "India", "Switzwerland", "USA")
LifeExpectancy <- c(74,76,65,83,79)
Country
LifeExpactancy
LifeExpectancy
Country[1]
seq(0, 100, 2)
CountryData <- data.frame(Country, LifeExpactancy)
CountryData <- data.frame(Country, LifeExpectancy)
CountryData
CountryData$Population <- c(199000, 1390000, 1240000, 7997, 318000)
install.packages("ROCR")
setwd("~/Documents/analyticsedgier/Week 05. Text Analytics/03. Bringing text analytics to the courtroom")
emails <- read.csv("energy_bids.csv")
emails <- read.csv("energy_bids.csv", stringsAsFactors=FALSE)
str(emails)
emails$email[1]
emails$responsive[1]
email$email[2]
emails$email[2]
table(emails$responsive)
library(tm)
corpus <- Corpus(VectorSource(emails$email))
corpus[[1]]
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, PlainTextDocument)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stemDocument)
corpus[[1]]
dtm <- DocumentTermMatrix(corpus)
dtm
dtm <- removeSparseTerms(dtm, 0.97)
dtm
labelledTerms <- as.data.frame(as.matrix(dtm))
labelledTerms$responsive <- dtm$responsive
labelledTerms$responsive <- emails$responsive
str(labelledTerms)
library(caTools)
set.seed(144)
spl <- sample.split(labelledTerms$responsive, SplitRatio = 0.7)
train <- subset(labelledTerms, spl==TRUE)
test <- subset(labelledTerms, spl==FALSE)
library(rpart)
library(rpart.plot)
emailCART = rpart(repsonsive ~ ., data=train, method="class")
emailCART = rpart(respsonsive ~ ., data=train, method="class")
emailCART = rpart(responsive ~ ., data=train, method="class")
prp(emailCART)
pred <- predict(emailCART, newdata=test)
pred[1:10,]
pred.prod <- pred[,2]
table(test$responsive, pred.prod > 0.5)
table(test$responsive, pred.prod >= 0.5)
accuracy <- (195 + 25) / (195 + 20 + 17 + 25)
accuracy
table(test$responsive, pred.prod >= 0.4)
table(test$responsive, pred.prod >= 0.3)
table(test$responsive, pred.prod >= 0.2)
table(test$responsive, pred.prod >= 0.1)
table(test$responsive, pred.prod >= 0.05)
table(test$responsive, pred.prod >= 0.01)
table(test$responsive, pred.prod >= 0.03)
table(test$responsive, pred.prod >= 0.04)
table(test$responsive, pred.prod >= 0.04)
table(test$responsive, pred.prod >= 0.05)
table(test$responsive)
accuracy <- 215 / (215 + 42)
accuracy
library(ROCR)
predROCR <- prediction(pred.prod, test$responsive)
perfROCR <- performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
performance(predROCR, "auc")@y.values
10000 * 1.04^(12*18)
10000 * 1.04^18
month <- 1.04^(1/12)
7500 * month - 7500
setwd("~/Documents/analyticsedgier/Week 06. Clustering/01. Intro to Clustering")
movies <- read.table("movieLens.txt", header=FALSE, sep = "|")
movies <- read.table("movieLens.txt", header=FALSE, sep = "|", quote="\"")
str(movies)
colnames(movies) <- c("ID", "Title", "ReleaseDate", "VideoReleaseDate", "IMDB", "Unkown", "Action",
"Adventure", "Animation", "Childrens", "Comedy", "Crime", "Documentary",
"Drama", "Fantasy", "FilmNoir", "Horror", "Musical", "Mystery", "Romance",
"SciFy", "Thriller", "War", "Western")
str(movies)
movies$ID <- NULL
movies$ReleaseDate <- NULL
movies$VideoReleaseDate <- NULL
movies$IMDB <- NULL
movies <- unique(movies)
str(movies)
table(movies$Comedy)
table(movies$Western)
table(movies$Romance, movies$Drama)
distances <- dist(movies[2:20], method="euclidean")
clusterMovies <- hclust(distances, method="ward.D")
plot(clusterMovies)
clusterGroups <- cutree(clusterMovies, k = 10)
tapply(movies$action, clusterGroups, mean)
tapply(movies$Action, clusterGroups, mean)
tapply(movies$Romance, clusterGroups, mean)
subset(movies, Title = "Men in Black (1997)")
subset(movies, Title == "Men in Black (1997)")
clusterGroups[257]
cluster2 <- subset(movies, clusterGroups==2)
cluster2$Title[1:10]
clusterGroupsTest <- cutree(clusterMovies, k = 2)
group1 <- subset(movies, clusterGroupsTest==1)
group2 <- subset(movies, clusterGroupsTest==2)
head(gorup2)
head(group2)
setwd("~/Documents/analyticsedgier/Week 06. Clustering/03. Segmenting Images to create data")
flower <- read.csv("flower.csv")
flower <- read.csv("flower.csv", header=FALSE)
str(flower)
flowerMatrix <- as.matrix(flower)
str(flowerMatrix)
flowerVector <- as.vector(flowerMatrix)
str(flowerVector)
distance <- dist(flowerVector, method = "euclidean")
clusterIntensity <- hclust(distance, method="ward.D")
plot(clusterIntensity)
rect.hclust(clusterIntensity, k=3, border="red")
flowerClusters <- cutree(clusterIntensity, k=3)
flowerClusters
tapply(flowerVector, flowerCluster, mean)
tapply(flowerVector, flowerClusters, mean)
image(flowerClusters, axes=FALSE)
dim(flowerClusters) = c(50,50)
image(flowerClusters, axes=FALSE)
image(flowerMatrix, axes=FALSE)
image(flowerMatrix, axes=FALSE, col=grey(seq(0,1,length=256)))
healthy <- read.csv("healthy.csv", headers = FALSE)
healthy <- read.csv("healthy.csv", header = FALSE)
healthyMatrix <- as.matrix(healthy)
str(healthyMatrix)
image(healthyMatrix, axes=FALSE, col=grey(seq(0,1,length=256)))
healthyVector <- as.vector(healthyMatrix)
distance <- dist(healthyVector, method = "euclidean")
str(healthyVector)
KMC <- kmeans(healthyVector, centers = k, iter.max = 1000)
k = 5
set.seed(1)
KMC <- kmeans(healthyVector, centers = k, iter.max = 1000)
str(KMC)
healthyClusters <- KMC$cluster
KMC$centers
dim(healthyClusters) <- c(nrow(healthMatrix), ncol(healthMatrix))
dim(healthyClusters) <- c(nrow(healthyMatrix), ncol(healthyMatrix))
image(healthyClusters, axes = FALSE, col=rainbow(k))
tumor <- read.csv("tumor.csv", header = FALSE)
tumorMatrix <- as.matrix(tumour)
tumorMatrix <- as.matrix(tumor)
tumorVector <- as.vector(tumorMatrix)
install.packages("flexclust")
library("flexclust")
KMC_kcca <- as.kcca(KMC)
KMC_kcca <- as.kcca(KMC, healthyVector)
tumorClusters <- predict(KMC_kcca, newdata=tumorVector)
dim(yumorClusters) <- c(nrow(tumorMatrix), ncol(tumorMatrix))
dim(tumorClusters) <- c(nrow(tumorMatrix), ncol(tumorMatrix))
image(tumorClusters, axes = FALSE, col=rainbow(5))
image(tumorMatrix, axes = FALSE, col=rainbow(5))
