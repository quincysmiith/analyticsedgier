install.packages("mime")
Sys.getenv("R_LIBS_USER")
install.packages("mime")
install.packages("mime")
install.packages("knitr")
install.packages("forecast")
install.packages("data.table")
install.package("slidify")
install.packages("slidify")
install.packages("devtools")
source("http://bioconductor.org/biocLite.R")
biocLite()
install.packages("ggplot2")
install.packages(KernSmooth)
install.packages("KernSmooth")
library(KErnSmooth)
library(KernSmooth)
library("KernSmooth")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("devtools")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages("shiny")
install.packages("tm")
install.packages("SnowballC")
install.packages("flexclust")
install.packages("tm")
install.packages("tm")
install.packages("SnowballC")
install.packages("flexclust")
install.packages("ggplot2")
install.packages("maps")
install.packages("ggmap")
install.packages("igraph")
install.packages("wordcloud")
install.packages("RColorBrewer")
x <- 1
print(x)
x
cube <- function(x,n){
x^3
}
cube(3)
library(datasets)
data(iris)
?iris
type(iris)
dimnames(iris)
library(datasets)
data(iris)
data <- dimnames(iris)
library(datasets)
data(iris)
?iris
head(iris)
str(iris)
lapply(s,mean, s$Sepal.Length)
s <- split(iris, iris$Species)
lapply(s,mean, s$Sepal.Length)
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
lapply(s, function(x) mean(x[, c("Sepal.Length", "Sepal.Width")]))
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
head(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(mpg, gear, mean))
summary(mtcars)
s <- with(mtcars, tapply(mpg, cyl, mean))
s
s[1]
s[1][1]
s[1] - s[2]
s[1] - s[3]
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
s <- with(mtcars, tapply(hp, cyl, mean))
s[1] - s[3]
?inv
?solve
c(2,3,5,8,13)
Country <- c("Brazil", "China" , "India", "Switzwerland", "USA")
LifeExpectancy <- c(74,76,65,83,79)
Country
LifeExpactancy
LifeExpectancy
Country[1]
seq(0, 100, 2)
CountryData <- data.frame(Country, LifeExpactancy)
CountryData <- data.frame(Country, LifeExpectancy)
CountryData
CountryData$Population <- c(199000, 1390000, 1240000, 7997, 318000)
install.packages("ROCR")
library(ggplot2)
library(maps)
library(ggmap)
statesMap <- map_data("state")
str(statesMap)
table(statesMap$group)
ggplot(statesMap, aes(x = long, y = lat, group = group)) + geom_polygon(fill = "white", color = "black")
# At home
setwd("~/Documents/analyticsedgier/Week 07. Visualization/02. Visualization for Law and Order")
mvt <- read.csv("mvt.csv", stringsAsFactors=FALSE)
mvt$Date <- strptime(mvt$Date, format="%m/%d/%y %H:%M")
# Add weekday and hour to data
mvt$Weekday <- weekdays(mvt$Date)
mvt$Hour<- format(mvt$Date, "%H")
str(mvt)
table(mvt$Weekday)
# convert table to dataframe for plotting
WeekdayCounts <- as.data.frame(table(mvt$Weekday))
str(WeekdayCounts)
library(ggplot2)
ggplot(WeekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group = 1))
# This plotted in alphabetical order
WeekdayCounts$Var1 <- factor(WeekdayCounts$Var1, ordered = TRUE,
levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
ggplot(WeekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group = 1))
# Add useful labels
ggplot(WeekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group = 1)) +
xlab("Day of the Week") + ylab("Total Motor Vehicle thefts")
#
# Quick Question
#
ggplot(WeekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group = 1), linetype=2) +
xlab("Day of the Week") + ylab("Total Motor Vehicle thefts")
ggplot(WeekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group = 1), alpha=0.3) +
xlab("Day of the Week") + ylab("Total Motor Vehicle thefts")
### A heatmap
table(mvt$Weekday, mvt$Hour)
DayHourCounts <- as.data.frame(table(mvt$Weekday, mvt$Hour))
str(DayHourCounts)
DayHourCounts$Hour <- as.numeric(as.character(DayHourCounts$Var2))
ggplot(DayHourCounts, aes(x = Hour, y = Freq)) + geom_line(aes(group=Var1))
# Let's have a different colour for each day of week
ggplot(DayHourCounts, aes(x = Hour, y = Freq)) + geom_line(aes(group=Var1, color = Var1), size=2)
DayHourCounts$Var1 <- factor(DayHourCounts$Var1, ordered = TRUE,
levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
# make heatmap
ggplot(DayHourCounts, aes(x = Hour, y = Var1)) + geom_tile(aes(fill = Freq))
ggplot(DayHourCounts, aes(x = Hour, y = Var1)) + geom_tile(aes(fill = Freq)) +
scale_fill_gradient(name="Total MV thefts") + theme(axis.title.y = element_blank())
# change colour theme
ggplot(DayHourCounts, aes(x = Hour, y = Var1)) + geom_tile(aes(fill = Freq)) +
scale_fill_gradient(name="Total MV thefts", low="white", high = "red") +
theme(axis.title.y = element_blank())
### Geographical hot spot map
library(maps)
library(ggmap)
chicago <- get_map(location = "chicago", zoom = 11)
ggmap(chicago)
ggmap(chicago) + geom_point(data=mvt[1:100,], aes(x = Longitude, y = Latitude))
LatLongCounts <- as.data.frame(table(round(mvt$Longitude, 2), round(mvt$Latitude, 2)))
str(LatLongCounts)
LatLongCounts$Long <- as.numeric(as.character(LatLongCounts$Var1))
LatLongCounts$Lat <- as.numeric(as.character(LatLongCounts$Var2))
ggmap(chicago) + geom_point(data = LatLongCounts, aes(x = Long, y = Lat, color = Freq, size = Freq))
ggmap(chicago) +
geom_point(data = LatLongCounts, aes(x = Long, y = Lat, color = Freq, size = Freq)) +
scale_color_gradient(low="yellow", high="red")
ggmap(chicago) +
geom_tile(data = LatLongCounts, aes(x = Long, y = Lat, alpha = Freq), fill = "red")
#
# Quick Quiz
#
LatLongCounts2 <- subset(LatLongCounts, Freq != 0)
nrow(LatLongCounts) - nrow(LatLongCounts2)
ggmap(chicago) +
geom_tile(data = LatLongCounts2, aes(x = Long, y = Lat, alpha = Freq), fill = "red")
murders <- read.csv("murders.csv")
str(murders)
statesMap <- maps_data("states")
str(statesMap)
statesMap <- maps_data("state)
""
)
dee
rc
c
frc
fdt
t
gg
dtt
f
)))
d
9*9
cfvgg
setwd("~/Documents/analyticsedgier/Week 07. Visualization/02. Visualization for Law and Order")
mvt <- read.csv("mvt.csv", stringsAsFactors=FALSE)
mvt$Date <- strptime(mvt$Date, format="%m/%d/%y %H:%M")
# Add weekday and hour to data
mvt$Weekday <- weekdays(mvt$Date)
mvt$Hour<- format(mvt$Date, "%H")
str(mvt)
table(mvt$Weekday)
# convert table to dataframe for plotting
WeekdayCounts <- as.data.frame(table(mvt$Weekday))
str(WeekdayCounts)
library(ggplot2)
ggplot(WeekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group = 1))
# This plotted in alphabetical order
WeekdayCounts$Var1 <- factor(WeekdayCounts$Var1, ordered = TRUE,
levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
ggplot(WeekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group = 1))
# Add useful labels
ggplot(WeekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group = 1)) +
xlab("Day of the Week") + ylab("Total Motor Vehicle thefts")
#
# Quick Question
#
ggplot(WeekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group = 1), linetype=2) +
xlab("Day of the Week") + ylab("Total Motor Vehicle thefts")
ggplot(WeekdayCounts, aes(x = Var1, y = Freq)) + geom_line(aes(group = 1), alpha=0.3) +
xlab("Day of the Week") + ylab("Total Motor Vehicle thefts")
### A heatmap
table(mvt$Weekday, mvt$Hour)
DayHourCounts <- as.data.frame(table(mvt$Weekday, mvt$Hour))
str(DayHourCounts)
DayHourCounts$Hour <- as.numeric(as.character(DayHourCounts$Var2))
ggplot(DayHourCounts, aes(x = Hour, y = Freq)) + geom_line(aes(group=Var1))
# Let's have a different colour for each day of week
ggplot(DayHourCounts, aes(x = Hour, y = Freq)) + geom_line(aes(group=Var1, color = Var1), size=2)
DayHourCounts$Var1 <- factor(DayHourCounts$Var1, ordered = TRUE,
levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
# make heatmap
ggplot(DayHourCounts, aes(x = Hour, y = Var1)) + geom_tile(aes(fill = Freq))
ggplot(DayHourCounts, aes(x = Hour, y = Var1)) + geom_tile(aes(fill = Freq)) +
scale_fill_gradient(name="Total MV thefts") + theme(axis.title.y = element_blank())
# change colour theme
ggplot(DayHourCounts, aes(x = Hour, y = Var1)) + geom_tile(aes(fill = Freq)) +
scale_fill_gradient(name="Total MV thefts", low="white", high = "red") +
theme(axis.title.y = element_blank())
### Geographical hot spot map
library(maps)
library(ggmap)
chicago <- get_map(location = "chicago", zoom = 11)
ggmap(chicago)
ggmap(chicago) + geom_point(data=mvt[1:100,], aes(x = Longitude, y = Latitude))
LatLongCounts <- as.data.frame(table(round(mvt$Longitude, 2), round(mvt$Latitude, 2)))
str(LatLongCounts)
LatLongCounts$Long <- as.numeric(as.character(LatLongCounts$Var1))
LatLongCounts$Lat <- as.numeric(as.character(LatLongCounts$Var2))
ggmap(chicago) + geom_point(data = LatLongCounts, aes(x = Long, y = Lat, color = Freq, size = Freq))
ggmap(chicago) +
geom_point(data = LatLongCounts, aes(x = Long, y = Lat, color = Freq, size = Freq)) +
scale_color_gradient(low="yellow", high="red")
ggmap(chicago) +
geom_tile(data = LatLongCounts, aes(x = Long, y = Lat, alpha = Freq), fill = "red")
#
# Quick Quiz
#
LatLongCounts2 <- subset(LatLongCounts, Freq != 0)
nrow(LatLongCounts) - nrow(LatLongCounts2)
ggmap(chicago) +
geom_tile(data = LatLongCounts2, aes(x = Long, y = Lat, alpha = Freq), fill = "red")
### Heatmap of the united states
murders <- read.csv("murders.csv")
str(murders)
statesMap <- maps_data("state")
str(statesMap)
statesMap <- map_data("state")
str(statesMap)
ggplot(statesMap, aes(x = long, y = lat, group = group)) +
geom_polygon(fill="white", color="black")
murders$region <- to_lower(murders$State)
murders$region <- tolower(murders$State)
murderMap <- merge(statesMap, murders, by = region)
murderMap <- merge(statesMap, murders, by = "region")
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = murders)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "black", high = "red", guide = legend)
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = murders)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "black", high = "red", guide = "legend")
str(murderMap)
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = Murders)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "black", high = "red", guide = "legend")
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = Population)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "black", high = "red", guide = "legend")
murderMap$MurderRate <- murderMap$Murders / murderMap$Population *100000
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "black", high = "red", guide = "legend")
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "black", high = "red", guide = "legend", limits = c(0,10))
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = GunOwnership)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "black", high = "red", guide = "legend", limits = c(0,10))
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = GunOwnership)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "black", high = "red", guide = "legend"))
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = GunOwnership)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "black", high = "red", guide = "legend")
