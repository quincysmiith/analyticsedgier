install.packages("mime")
Sys.getenv("R_LIBS_USER")
install.packages("mime")
install.packages("mime")
install.packages("knitr")
install.packages("forecast")
install.packages("data.table")
install.package("slidify")
install.packages("slidify")
install.packages("devtools")
source("http://bioconductor.org/biocLite.R")
biocLite()
install.packages("ggplot2")
install.packages(KernSmooth)
install.packages("KernSmooth")
library(KErnSmooth)
library(KernSmooth)
library("KernSmooth")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("devtools")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages("shiny")
install.packages("tm")
install.packages("SnowballC")
install.packages("flexclust")
install.packages("tm")
install.packages("tm")
install.packages("SnowballC")
install.packages("flexclust")
install.packages("ggplot2")
install.packages("maps")
install.packages("ggmap")
install.packages("igraph")
install.packages("wordcloud")
install.packages("RColorBrewer")
x <- 1
print(x)
x
cube <- function(x,n){
x^3
}
cube(3)
library(datasets)
data(iris)
?iris
type(iris)
dimnames(iris)
library(datasets)
data(iris)
data <- dimnames(iris)
library(datasets)
data(iris)
?iris
head(iris)
str(iris)
lapply(s,mean, s$Sepal.Length)
s <- split(iris, iris$Species)
lapply(s,mean, s$Sepal.Length)
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
lapply(s, function(x) mean(x[, c("Sepal.Length", "Sepal.Width")]))
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
head(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(mpg, gear, mean))
summary(mtcars)
s <- with(mtcars, tapply(mpg, cyl, mean))
s
s[1]
s[1][1]
s[1] - s[2]
s[1] - s[3]
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
s <- with(mtcars, tapply(hp, cyl, mean))
s[1] - s[3]
?inv
?solve
c(2,3,5,8,13)
Country <- c("Brazil", "China" , "India", "Switzwerland", "USA")
LifeExpectancy <- c(74,76,65,83,79)
Country
LifeExpactancy
LifeExpectancy
Country[1]
seq(0, 100, 2)
CountryData <- data.frame(Country, LifeExpactancy)
CountryData <- data.frame(Country, LifeExpectancy)
CountryData
CountryData$Population <- c(199000, 1390000, 1240000, 7997, 318000)
install.packages("ROCR")
library(ggplot2)
library(maps)
library(ggmap)
statesMap <- map_data("state")
str(statesMap)
table(statesMap$group)
ggplot(statesMap, aes(x = long, y = lat, group = group)) + geom_polygon(fill = "white", color = "black")
polling <- read.csv("pollingimputed.csv")
polling <- read.csv("PollingImputed.csv")
setwd("~/Documents/analyticsedgier/Week 07. Visualization/Homeworks")
polling <- read.csv("PollingImputed.csv")
str(polling)
test <- subset(polling, Year == 2012)
train <- subset(polling, Year == 2004 | Year == 2008)
mod2 <- glm(Republican~SurveyUSA+DiffCount, data=Train, family="binomial")
mod2 <- glm(Republican~SurveyUSA+DiffCount, data=train, family="binomial")
TestPrediction < predict(mod2, newdata=test, type="response")
TestPrediction <- predict(mod2, newdata=test, type="response")
TestPredictionBinary = as.numeric(TestPrediction > 0.5)
str(TestPredictionBinary)
predictionDataFrame = data.frame(TestPrediction, TestPredictionBinary, Test$State)
predictionDataFrame = data.frame(TestPrediction, TestPredictionBinary, test$State)
head(predictionDataFrame)
table(predictionDataFrame$TestPredictionBinary)
summary(predictionDataFrame)
predictionDataFrame$region <- tolower(predictionDataFrame$Test.State)
predictionDataFrame$region <- tolower(predictionDataFrame$Test.State)
str(predictionDataFrame)
predictionDataFrame$region <- tolower(predictionDataFrame$test.State)
predictionMap = merge(statesMap, predictionDataFrame, by = "region")
predictionMap = predictionMap[order(predictionMap$order),]
str(predictionMap)
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPredictionBinary)) +
geom_polygon(color = "black")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPredictionBinary)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
str(predictionMap)
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
subset(predictionDataFrame, region == "florida")
?geom_polygon
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction, size=3)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
