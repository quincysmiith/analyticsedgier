install.packages("mime")
Sys.getenv("R_LIBS_USER")
install.packages("mime")
install.packages("mime")
install.packages("knitr")
install.packages("forecast")
install.packages("data.table")
install.package("slidify")
install.packages("slidify")
install.packages("devtools")
source("http://bioconductor.org/biocLite.R")
biocLite()
install.packages("ggplot2")
install.packages(KernSmooth)
install.packages("KernSmooth")
library(KErnSmooth)
library(KernSmooth)
library("KernSmooth")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("devtools")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages("shiny")
install.packages("tm")
install.packages("SnowballC")
install.packages("flexclust")
install.packages("tm")
install.packages("tm")
install.packages("SnowballC")
install.packages("flexclust")
install.packages("ggplot2")
install.packages("maps")
install.packages("ggmap")
install.packages("igraph")
install.packages("wordcloud")
install.packages("RColorBrewer")
x <- 1
print(x)
x
cube <- function(x,n){
x^3
}
cube(3)
library(datasets)
data(iris)
?iris
type(iris)
dimnames(iris)
library(datasets)
data(iris)
data <- dimnames(iris)
library(datasets)
data(iris)
?iris
head(iris)
str(iris)
lapply(s,mean, s$Sepal.Length)
s <- split(iris, iris$Species)
lapply(s,mean, s$Sepal.Length)
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
lapply(s, function(x) mean(x[, c("Sepal.Length", "Sepal.Width")]))
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
head(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(mpg, gear, mean))
summary(mtcars)
s <- with(mtcars, tapply(mpg, cyl, mean))
s
s[1]
s[1][1]
s[1] - s[2]
s[1] - s[3]
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
s <- with(mtcars, tapply(hp, cyl, mean))
s[1] - s[3]
?inv
?solve
c(2,3,5,8,13)
Country <- c("Brazil", "China" , "India", "Switzwerland", "USA")
LifeExpectancy <- c(74,76,65,83,79)
Country
LifeExpactancy
LifeExpectancy
Country[1]
seq(0, 100, 2)
CountryData <- data.frame(Country, LifeExpactancy)
CountryData <- data.frame(Country, LifeExpectancy)
CountryData
CountryData$Population <- c(199000, 1390000, 1240000, 7997, 318000)
install.packages("ROCR")
logit <- -1.5 + (3*1) + (-0.5*5)
logit
exp(-1)
1 / (1 + exp(1))
#
# Logistic Regression in R
#
# Build a logistic regression model to predict poor care
setwd("~/Documents/analyticsedgier/Week 03. Logistic Regression/01. Intro to logistic regression")
quality <- read.csv("quality.csv")
str(quality)
# How many people received poor and good care
table(quality$PoorCare)
# baseline of logistic model is just to predict most frequent outcome
98/131
install.packages("caTools")
library("caTools")
set.seed(88)
split <- sample.split(quality$PoorCare, SplitRatio = 0.75)
# in split TRUE indicates training set while false indicates test set
qualityTrain <- subset(quality, split == TRUE)
qualityTest <- subset(quality, split == FALSE)
# lets build the model using the test set
# the "family=binomial" tells the general linear model to create a logistic model
qualityLog <- glm(PoorCare ~ OfficeVisits + Narcotics, data = qualityTrain,family=binomial)
summary(qualityLog)
predictTrain <- predict(qualityLog, type="response")
summary(predictTrain)
tapply(predictTrain, qualityTrain$PoorCare, mean)
#
# Quick question
#
qualityLog2 <- glm(PoorCare ~ StartedOnCombination + ProviderCount, data=qualityTrain, family=binomial)
summary(qualityLog2)
#
# Thresholding
#
table(qualityTrain$PoorCare, predictTrain > 0.5)
# Sensitivity
10/25
# Specificity
70/74
# increase threshold
table(qualityTrain$PoorCare, predictTrain > 0.7)
# Sensitivity
8/25
# Specificity
73/74
# decrease threshold
table(qualityTrain$PoorCare, predictTrain > 0.2)
# Sensitivity
16/25
# Specificity
54/74
install.packages("ROCR")
library("ROCR")
ROCRpred <- prediction(predictTrain, qualityTrain$PoorCare)
ROCRperf <- performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf)
plot(ROCRperf, colorize=TRUE)
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.1))
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0, 1, 0.1), text.adj=c(-0.2,1.7))
?prediction
predictTest <- predict(qualityLog, type="response", newdata=qualityTest)
ROCRpredTest <- prediction(predictTest , qualityTest$PoorCare)
auc <- as.numeric(performance(ROCRpredTest, "auc")@y.values)
auc
