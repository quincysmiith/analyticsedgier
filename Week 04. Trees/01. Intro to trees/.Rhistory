install.packages("mime")
Sys.getenv("R_LIBS_USER")
install.packages("mime")
install.packages("mime")
install.packages("knitr")
install.packages("forecast")
install.packages("data.table")
install.package("slidify")
install.packages("slidify")
install.packages("devtools")
source("http://bioconductor.org/biocLite.R")
biocLite()
install.packages("ggplot2")
install.packages(KernSmooth)
install.packages("KernSmooth")
library(KErnSmooth)
library(KernSmooth)
library("KernSmooth")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("devtools")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages("shiny")
install.packages("tm")
install.packages("SnowballC")
install.packages("flexclust")
install.packages("tm")
install.packages("tm")
install.packages("SnowballC")
install.packages("flexclust")
install.packages("ggplot2")
install.packages("maps")
install.packages("ggmap")
install.packages("igraph")
install.packages("wordcloud")
install.packages("RColorBrewer")
x <- 1
print(x)
x
cube <- function(x,n){
x^3
}
cube(3)
library(datasets)
data(iris)
?iris
type(iris)
dimnames(iris)
library(datasets)
data(iris)
data <- dimnames(iris)
library(datasets)
data(iris)
?iris
head(iris)
str(iris)
lapply(s,mean, s$Sepal.Length)
s <- split(iris, iris$Species)
lapply(s,mean, s$Sepal.Length)
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
lapply(s, function(x) mean(x[, c("Sepal.Length", "Sepal.Width")]))
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
head(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(mpg, gear, mean))
summary(mtcars)
s <- with(mtcars, tapply(mpg, cyl, mean))
s
s[1]
s[1][1]
s[1] - s[2]
s[1] - s[3]
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
s <- with(mtcars, tapply(hp, cyl, mean))
s[1] - s[3]
?inv
?solve
c(2,3,5,8,13)
Country <- c("Brazil", "China" , "India", "Switzwerland", "USA")
LifeExpectancy <- c(74,76,65,83,79)
Country
LifeExpactancy
LifeExpectancy
Country[1]
seq(0, 100, 2)
CountryData <- data.frame(Country, LifeExpactancy)
CountryData <- data.frame(Country, LifeExpectancy)
CountryData
CountryData$Population <- c(199000, 1390000, 1240000, 7997, 318000)
install.packages("ROCR")
# At home
setwd("~/Documents/analyticsedgier/Week 04. Trees/01. Intro to trees")
stevens <- read.csv("stevens.csv")
str(stevens)
summary(stevens)
library(caTools)
set.seed(3000)
spl <- sample.split(stevens$Reverse, SplitRatio = 0.7)
train <- subset(stevens, spl == TRUE)
test <- subset(stevens, spl == FALSE)
# Install packages needed to make decision trees
## install.packages("rpart") ##
library("rpart")
## install.packages("rpart.plot") ##
library("rpart.plot")
stevensTree <- rpart(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst,
data=train, method="class", minbucket=25)
#plot model
prp(stevensTree)
predictCart <- predict(stevensTree, newdata=test, type="class")
table(test$Reverse, predictCart)
accuracy <- (41 + 71) / (41 + 36 + 22 + 71)
accuracy
library(ROCR)
predictROC <- predict(stevensTree, newdata=test)
predictROC
pred <- prediction(predictROC[,2], test$Reverse)
perf <- performance(pred, "tpr", "fpr")
plot(perf)
auc <- as.numeric(performance(pred, "auc")@y.values)
auc
stevensTree2 <- rpart(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst,
data=train, method="class", minbucket=5)
prp(stevensTree2)
stevensTree3 <- rpart(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst,
data=train, method="class", minbucket=100)
prp(stevensTree3)
#
# Random Forests
#
install.packages("randomForest")
library("randomForest")
stevensForest <- randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst,
data=train, nodesize=25, ntree = 200)
# When building random forests there is no method argument so we can't choose it to be "class"
# Instead we need to convert the dependent variable we are trying to predict into a factor variable
train$Reverse <- as.factor(train$Reverse)
test$Reverse <- as.factor(test$Reverse)
stevensForest <- randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst,
data=train, nodesize=25, ntree = 200)
predictForest <- predict(stevensForest, newdata = test)
table(test$Reverse, predictForest)
accuracy <- (42 + 75) / (42 + 35 + 18 + 75)
accuracy
#
# Quick quiz
#
set.seed(100)
stevensForest <- randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst,
data=train, nodesize=25, ntree = 200)
table(test$Reverse, predictForest)
set.seed(200)
stevensForest <- randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst,
data=train, nodesize=25, ntree = 200)
table(test$Reverse, predictForest)
install.packages("caret")
library("caret")
install.packages("e1071")
library("e1071")
numFolds <- trainControl(method = "cv", number=10)
cpGrid <- expand.grid(.cp=seq(0.01, 0.5, 0.01))
train(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst,
data=train, method = "rpart", trControl=numFolds, tuneGrid=cpGrid)
stevensTreeCV <- rpart(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst,
data=train, method="class", cp=0.19)
predictCV <- predict(stevensTreeCV, newdata=test, type="class")
table(test$Reverse, predictCV)
accuracy <- (59 + 64) / (59 + 18 + 29 + 64)
accuracy
prp(stevensTreeCV)
prp(stevensTree)
prp(stevensTreeCV)
prp(stevensTree2)
prp(stevensTreeCV)
