install.packages("mime")
Sys.getenv("R_LIBS_USER")
install.packages("mime")
install.packages("mime")
install.packages("knitr")
install.packages("forecast")
install.packages("data.table")
install.package("slidify")
install.packages("slidify")
install.packages("devtools")
source("http://bioconductor.org/biocLite.R")
biocLite()
install.packages("ggplot2")
install.packages(KernSmooth)
install.packages("KernSmooth")
library(KErnSmooth)
library(KernSmooth)
library("KernSmooth")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("devtools")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages("shiny")
install.packages("tm")
install.packages("SnowballC")
install.packages("flexclust")
install.packages("tm")
install.packages("tm")
install.packages("SnowballC")
install.packages("flexclust")
install.packages("ggplot2")
install.packages("maps")
install.packages("ggmap")
install.packages("igraph")
install.packages("wordcloud")
install.packages("RColorBrewer")
x <- 1
print(x)
x
cube <- function(x,n){
x^3
}
cube(3)
library(datasets)
data(iris)
?iris
type(iris)
dimnames(iris)
library(datasets)
data(iris)
data <- dimnames(iris)
library(datasets)
data(iris)
?iris
head(iris)
str(iris)
lapply(s,mean, s$Sepal.Length)
s <- split(iris, iris$Species)
lapply(s,mean, s$Sepal.Length)
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
lapply(s, function(x) mean(x[, c("Sepal.Length", "Sepal.Width")]))
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
head(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(mpg, gear, mean))
summary(mtcars)
s <- with(mtcars, tapply(mpg, cyl, mean))
s
s[1]
s[1][1]
s[1] - s[2]
s[1] - s[3]
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
s <- with(mtcars, tapply(hp, cyl, mean))
s[1] - s[3]
?inv
?solve
c(2,3,5,8,13)
Country <- c("Brazil", "China" , "India", "Switzwerland", "USA")
LifeExpectancy <- c(74,76,65,83,79)
Country
LifeExpactancy
LifeExpectancy
Country[1]
seq(0, 100, 2)
CountryData <- data.frame(Country, LifeExpactancy)
CountryData <- data.frame(Country, LifeExpectancy)
CountryData
CountryData$Population <- c(199000, 1390000, 1240000, 7997, 318000)
install.packages("ROCR")
setwd("~/Documents/analyticsedgier/Week 04. Trees/02. The D2Hawkeye Story")
claims <- read.csv("ClaimsData.csv")
str(claims)
table(claims$bucket2009) / nrow(claim)
table(claims$bucket2009) / nrow(claims)
library(caTools)
set.seed(88)
split <- sample.split(claims$bucket2009, SplitRatio = 0.6)
claimsTrain <- subset(claims, split == TRUE)
claimsTest <- subset(claims, split == FALSE)
mean(claimsTrain$age)
table(claimsTrain$diabetes)
nrow(subset(claimsTrain, diabetes == 1)) / nrow(claimTrain)
nrow(subset(claimsTrain, diabetes == 1)) / nrow(claimsTrain)
table(claimsTest$bucket2009, claimsTest$bucket2008)
accuracy <- (110138 + 10721 + 2774 + 1539 + 104) / nrow(claimsTest)
accuracy
penaltyMatrix <- matrix(c(1,2,3,4,2,0,1,2,3,4,2,0,1,2,6,4,2,0,1,8,6,4,2,0),
byrow = TRUE, nrow = 5)
penaltyMatrix
penaltyMatrix <- matrix(c(0,1,2,3,4,2,0,1,2,3,4,2,0,1,2,6,4,2,0,1,8,6,4,2,0),
byrow = TRUE, nrow = 5)
penaltyMatrix
as.matrix(table(claimsTest$bucket2009, claimsTest$bucket2008)) * penaltyMatrix
sum(as.matrix(table(claimsTest$bucket2009, claimsTest$bucket2008)) * penaltyMatrix) /nrow(claimsTest)
table(claimsTest$bucket2008)
table(claimsTest$bucket2009, claimsTest$bucket2008 == 1)
110138 / nrow(claimsTest)
table(claimsTest$bucket2009, claimsTest$bucket2009 == 1)
110138 / nrow(claimsTest)
122978 / nrow(claimsTest)
as.matrix(table(claimsTest$bucket2009, claimsTest$bucket2009 == 1))
as.matrix(table(claimsTest$bucket2009, claimsTest$bucket2009 == 1))[[1]]
as.matrix(table(claimsTest$bucket2009, claimsTest$bucket2009 == 1))[1
]
as.matrix(table(claimsTest$bucket2009, claimsTest$bucket2009 == 1))[[1,]]
as.matrix(table(claimsTest$bucket2009, claimsTest$bucket2009 == 1))[[1,:]]
as.matrix(table(claimsTest$bucket2009, claimsTest$bucket2009 == 1))[[,1]]
as.matrix(table(claimsTest$bucket2009, claimsTest$bucket2009 == 1))[[:,1]]
as.matrix(table(claimsTest$bucket2009, claimsTest$bucket2009 == 1))[:,1]
as.matrix(table(claimsTest$bucket2009, claimsTest$bucket2009 == 1))[1,]
as.matrix(table(claimsTest$bucket2009, claimsTest$bucket2009 == 1))[,1]
as.matrix(table(claimsTest$bucket2009, claimsTest$bucket2009 == 1))[,1] * c(0,2,4,6,8)
sum(as.matrix(table(claimsTest$bucket2009, claimsTest$bucket2009 == 1))[,1] * c(0,2,4,6,8))) / nrow(claimsTest)
sum(as.matrix(table(claimsTest$bucket2009, claimsTest$bucket2009 == 1))[,1] * c(0,2,4,6,8)) / nrow(claimsTest)
library(rpart)
library(rpart.plot)
names(claims)
claimsTree <- rpart(bucket2009 ~ age + arthritis + alzheimers + cancer + COPD + depression +
diabetes + heart.failure + ihd + kidney + osteoperosis + stroke +
bucket2008 + reimbursement2008,
data = claimsTrain, method=class, cp=0.00005)
claimsTree <- rpart(bucket2009 ~ age + arthritis + alzheimers + cancer + copd + depression +
diabetes + heart.failure + ihd + kidney + osteoperosis + stroke +
bucket2008 + reimbursement2008,
data = claimsTrain, method=class, cp=0.00005)
claimsTree <- rpart(bucket2009 ~ age + arthritis + alzheimers + cancer + copd + depression +
diabetes + heart.failure + ihd + kidney + osteoporosis + stroke +
bucket2008 + reimbursement2008,
data = claimsTrain, method=class, cp=0.00005)
claimsTree <- rpart(bucket2009 ~ age + arthritis + alzheimers + cancer + copd + depression +
diabetes + heart.failure + ihd + kidney + osteoporosis + stroke +
bucket2008 + reimbursement2008,
data = claimsTrain, method="class", cp=0.00005)
prp(claimsTree)
predictTest <- predict(claimsTree, newdata = claimsTest, type="class")
table(claimsTest$bucket2009, predictTest)
accuracy <- (114141 + 16102 + 118 + 201 + 0) / nrow(claimsTest)
accuracy
sum(as.matrix(table(claimsTest$bucket2009, predictTest)) * penaltyMatrix) / nrow(claimsTest)
claimsTree2 <- rpart(bucket2009 ~ age + arthritis + alzheimers + cancer + copd + depression +
diabetes + heart.failure + ihd + kidney + osteoporosis + stroke +
bucket2008 + reimbursement2008,
data = claimsTrain, method="class", cp=0.00005,
parms=list(loss=penaltyMatrix))
predictTest2 <- predict(claimsTree2, newdata = claimsTest, type="class")
table(claimsTest$bucket2009, predictTest2)
accuracy <- (94310 + 18942 + 4692 + 636 + 2) / nrow(claimsTest)
accuracy
sum(as.matrix(table(claimsTest$bucket2009, predictTest2)) * penaltyMatrix) / nrow(claimsTest)
setwd("~/Documents/analyticsedgier/Week 04. Trees/03. Regression Trees for housing data")
boston <- read.csv("boston.csv")
str(boston)
setwd("~/Documents/analyticsedgier/Week 04. Trees/03. Regression Trees for housing data")
boston <- read.csv("boston.csv")
str(boston)
plot(boston$LON, boston$LAT)
points(boston$LON[boston$CHAS ==1], boston$LAT[boston$CHAS ==1], col="blue", pch=19)
points(boston$LON[boston$TRACT == 3531], boston$LAT[boston$TRACT == 3531], col="red", pch=19)
summary(boston$NOX)
points(boston$LON[boston$NOX > 0.55], boston$LON[boston$NOX > 0.55], col="green", pch=19)
plot(boston$LON, boston$LAT)
# Add pints that lie on boston river
points(boston$LON[boston$CHAS ==1], boston$LAT[boston$CHAS ==1], col="blue", pch=19)
points(boston$LON[boston$TRACT == 3531], boston$LAT[boston$TRACT == 3531], col="red", pch=19)
summary(boston$NOX)
points(boston$LON[boston$NOX > 0.55], boston$LON[boston$NOX > 0.55], col="green", pch=19)
points(boston$LON[boston$NOX > 0.55], boston$LAT[boston$NOX > 0.55], col="green", pch=19)
plot(boston$LON, boston$LAT)
summary(boston$MEDV)
points(boston$LON[boston$CHAS ==1], boston$LAT[boston$CHAS ==1], col="blue", pch=19)
plot(boston$LON, boston$LAT)
summary(boston$MEDV)
points(boston$LON[boston$MEDV > 21.2], boston$LAT[boston$MEDV > 21.2], col="red", pch=19)
plot(boston$LAT, boston$MEDV)
plot(boston$LON, boston$MEDV)
latlonlm <- lm(MEDV ~ LAT + LON, data=boston)
summary(latlonlm)
plot(boston$LON, boston$LAT)
points(boston$LON[boston$MEDV > 21.2], boston$LAT[boston$MEDV > 21.2], col="red", pch=19)
points(boston$LON[latlonlm$fitted.values >= 21.2], boston$LON[latlonlm$fitted.values >= 21.2],
col="blue", pch="$")
points(boston$LON[latlonlm$fitted.values >= 21.2], boston$LAT[latlonlm$fitted.values >= 21.2],
col="blue", pch="$")
