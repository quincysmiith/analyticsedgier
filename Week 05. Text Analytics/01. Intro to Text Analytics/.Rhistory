install.packages("mime")
Sys.getenv("R_LIBS_USER")
install.packages("mime")
install.packages("mime")
install.packages("knitr")
install.packages("forecast")
install.packages("data.table")
install.package("slidify")
install.packages("slidify")
install.packages("devtools")
source("http://bioconductor.org/biocLite.R")
biocLite()
install.packages("ggplot2")
install.packages(KernSmooth)
install.packages("KernSmooth")
library(KErnSmooth)
library(KernSmooth)
library("KernSmooth")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("devtools")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages("shiny")
install.packages("tm")
install.packages("SnowballC")
install.packages("flexclust")
install.packages("tm")
install.packages("tm")
install.packages("SnowballC")
install.packages("flexclust")
install.packages("ggplot2")
install.packages("maps")
install.packages("ggmap")
install.packages("igraph")
install.packages("wordcloud")
install.packages("RColorBrewer")
x <- 1
print(x)
x
cube <- function(x,n){
x^3
}
cube(3)
library(datasets)
data(iris)
?iris
type(iris)
dimnames(iris)
library(datasets)
data(iris)
data <- dimnames(iris)
library(datasets)
data(iris)
?iris
head(iris)
str(iris)
lapply(s,mean, s$Sepal.Length)
s <- split(iris, iris$Species)
lapply(s,mean, s$Sepal.Length)
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
lapply(s, function(x) mean(x[, c("Sepal.Length", "Sepal.Width")]))
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
head(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(mpg, gear, mean))
summary(mtcars)
s <- with(mtcars, tapply(mpg, cyl, mean))
s
s[1]
s[1][1]
s[1] - s[2]
s[1] - s[3]
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
s <- with(mtcars, tapply(hp, cyl, mean))
s[1] - s[3]
?inv
?solve
c(2,3,5,8,13)
Country <- c("Brazil", "China" , "India", "Switzwerland", "USA")
LifeExpectancy <- c(74,76,65,83,79)
Country
LifeExpactancy
LifeExpectancy
Country[1]
seq(0, 100, 2)
CountryData <- data.frame(Country, LifeExpactancy)
CountryData <- data.frame(Country, LifeExpectancy)
CountryData
CountryData$Population <- c(199000, 1390000, 1240000, 7997, 318000)
install.packages("ROCR")
setwd("~/Documents/analyticsedgier/Week 05. Text Analytics/01. Intro to Text Analytics")
tweets <- read.csv("tweets.csv", stringsAsFactors=FALSE)
str(tweets)
tweets$Negative <- as.factor(tweets$Avg <= -1)
table(tweets$Negative)
library(tm)
library(SnowballC)
corpus <- Corpus(VectorSource(tweets$Tweet))
str(corpus)
corpus
corpus[[1]]
corpus <- lm_map(corpus, tolower)
corpus <- tm_map(corpus, tolower)
corpus[[1]]
corpus <- tm_map(corpus, PlainTextDocument)
corpus[[1]]
corpus <- tm_map(corpus, removePunctuation)
stopwords("english")[1:10]
corpus <- tm_map(corpus, removeWords, c("apple", stopwords("english")))
corpus[[1]]
corpus <- tm_map(corpus, stemDocument)
corpus[[1]]
frequencies <- DocumentTermMatrix(corpus)
frequencies
inspect(frequencies[1000:1005, 505:515])
findFreqTerms(frequencies, lowfreq=20)
sparse <- removeSparseTerms(frequencies, 0.995)
sparse
tweetsSparse <- as.data.frame(as.matrix(sparse))
colnames(tweetsSparse) <- make.names(colnames(tweetsSparse))
tweetsSparse$Negative <- tweets$Negative
library(caTools)
set.seed(123)
split <- sample.split(tweetsSparse$Negative, SplitRatio = 0.7)
trainSparse <- subset(tweetsSparse, split==TRUE)
testSparse <- subset(tweetsSparse, split==FALSE)
findFreqTerms(frequencies, lowfreq=100)
library(rpart)
library(rpart.plot)
tweetCART <- rpart(Negative ~ ., data=trainSparse, method="class")
prp(tweetCART)
predictCART <- predict(tweetCART, newdata=testSparse, type="class")
table(testSparse$Negative, predictCart)
table(testSparse$Negative, predictCART)
accuracy <- (294 + 18) / nrow(testSparse)
accuracy
table(testSparse$Negative)
300 / 355
tweetRF <- randomForest(Negative ~ ., data=trainSparse)
library(randomForest)
set.seed(123)
tweetRF <- randomForest(Negative ~ ., data=trainSparse)
predictRF <- predict(tweetRF, newdata=testSparse)
table(testSparse$Negative, predictRF)
accuracy <- (293 + 21) / nrow(testSparse)
accuracy
tweetLog <- glm(Negative ~ ., data=trainSparse, family="binomial")
tweetLog_pred <- predict(tweetLog, newdata=testSparse)
table(testSparse$Negative, tweetLog_pred > 0.5)
accuracy <- (257 + 34) / nrow(testSparse)
accuracy
